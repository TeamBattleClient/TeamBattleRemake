package down.TeamBattle.mod.mods;

import down.TeamBattle.command.Command;
import down.TeamBattle.event.Event;
import down.TeamBattle.event.events.EventPreSendMotionUpdates;
import down.TeamBattle.mod.Mod;
import down.TeamBattle.util.Logger;
import down.TeamBattle.util.TimeHelper;
import down.TeamBattle.value.Value;
import me.teambattle.TeamBattle.LateMod;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C09PacketHeldItemChange;

public final class AutoApple extends Mod {
	private final Value<Long> delay = new Value<Long>("autoapple_delay", 500L);
	private final Value<Float> health = new Value<Float>("autoapple_health",
			16.0F);
	private final TimeHelper time = new TimeHelper();

	public AutoApple() {
		super("AutoApple", 0xFF46A69F);

		LateMod.getCommandManager()
				.getContents()
				.add(new Command("autoapplehealth", "<health>", "aahealth",
						"aah") {
					@Override
					public void run(String message) {
						if (message.split(" ")[1].equalsIgnoreCase("-d")) {
							health.setValue(health.getDefaultValue());
						} else {
							health.setValue(Float.parseFloat(message.split(" ")[1]));
						}
						if (health.getValue() < 1.0F) {
							health.setValue(1.0F);
						}
						Logger.logChat("AutoApple Health set to: "
								+ health.getValue());
					}
				});

		LateMod.getCommandManager()
				.getContents()
				.add(new Command("autoappledelay", "<delay>", "aadelay", "aad") {
					@Override
					public void run(String message) {
						if (message.split(" ")[1].equalsIgnoreCase("-d")) {
							delay.setValue(delay.getDefaultValue());
						} else {
							delay.setValue(Long.parseLong(message.split(" ")[1]));
						}

						if (delay.getValue() > 10000) {
							delay.setValue(10000L);
						} else if (delay.getValue() < 1) {
							delay.setValue(1L);
						}
						Logger.logChat("AutoApple Delay set to: "
								+ delay.getValue());
					}
				});
	}

	private boolean canEat() {
		return mc.thePlayer.onGround
				&& mc.thePlayer.getHealth() <= health.getValue();
	}

	private int findItem(int id) {
		for (int index = 36; index < 45; index++) {
			final ItemStack item = mc.thePlayer.inventoryContainer.getSlot(
					index).getStack();
			if (item != null && Item.getIdFromItem(item.getItem()) == id)
				return index;
		}
		return -1;
	}

	@Override
	public void onEnabled() {
		super.onEnabled();
		if (mc.theWorld != null) {
			Logger.logChat("\247cWARNING:\247f This mod is patched by newer NoCheat versions.");
		}
	}

	@Override
	public void onEvent(Event event) {
		if (event instanceof EventPreSendMotionUpdates) {
			if (updateCounter() != 0 && canEat()) {
				int selectedSlot = -1;
				final int original = mc.thePlayer.inventory.currentItem;
				if (findItem(322) != -1) {
					selectedSlot = findItem(322) - 36;
				}

				if (time.hasReached(delay.getValue()) && selectedSlot != -1) {
					mc.getNetHandler().addToSendQueue(
							new C09PacketHeldItemChange(selectedSlot));
					mc.playerController.updateController();
					mc.getNetHandler().addToSendQueue(
							new C08PacketPlayerBlockPlacement(-1, -1, -1, -1,
									mc.thePlayer.inventory.getCurrentItem(),
									0.0F, 0.0F, 0.0F));
					mc.getNetHandler().addToSendQueue(
							new C09PacketHeldItemChange(selectedSlot));
					for (int x = 0; x < 32; x++) {
						mc.getNetHandler().addToSendQueue(
								new C03PacketPlayer(mc.thePlayer.onGround));
					}
					mc.getNetHandler().addToSendQueue(
							new C07PacketPlayerDigging(5, 0, 0, 0, 0));
					mc.thePlayer.stopUsingItem();
					mc.getNetHandler().addToSendQueue(
							new C09PacketHeldItemChange(original));
					time.reset();
				}
			}
		}
	}

	private int updateCounter() {
		int counter = 0;
		for (int index = 36; index < 45; index++) {
			final ItemStack item = mc.thePlayer.inventoryContainer.getSlot(
					index).getStack();
			if (item != null && Item.getIdFromItem(item.getItem()) == 322) {
				counter += item.stackSize;
			}
		}

		setTag(getName() + "\247f: \2477" + counter);
		return counter;
	}
}
