package net.minecraft.network;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.Channel;
import io.netty.channel.ChannelException;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.channel.local.LocalChannel;
import io.netty.channel.local.LocalServerChannel;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.timeout.ReadTimeoutHandler;
import io.netty.handler.timeout.TimeoutException;
import io.netty.util.AttributeKey;
import io.netty.util.concurrent.GenericFutureListener;

import java.net.InetAddress;
import java.net.SocketAddress;
import java.util.Queue;

import javax.crypto.SecretKey;

import net.minecraft.util.ChatComponentTranslation;
import net.minecraft.util.CryptManager;
import net.minecraft.util.IChatComponent;
import net.minecraft.util.MessageDeserializer;
import net.minecraft.util.MessageDeserializer2;
import net.minecraft.util.MessageSerializer;
import net.minecraft.util.MessageSerializer2;

import org.apache.commons.lang3.Validate;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.MarkerManager;

import com.google.common.collect.Queues;
import com.google.common.util.concurrent.ThreadFactoryBuilder;

import down.TeamBattle.TeamBattleClient;
import down.TeamBattle.event.events.EventPacketReceive;
import down.TeamBattle.event.events.EventPacketSent;

public class NetworkManager extends SimpleChannelInboundHandler {
	static class InboundHandlerTuplePacketListener {
		private final GenericFutureListener[] field_150773_b;
		private final Packet field_150774_a;

		public InboundHandlerTuplePacketListener(Packet p_i45146_1_,
				GenericFutureListener... p_i45146_2_) {
			field_150774_a = p_i45146_1_;
			field_150773_b = p_i45146_2_;
		}
	}

	public static final AttributeKey attrKeyConnectionState = new AttributeKey(
			"protocol");

	public static final AttributeKey attrKeyReceivable = new AttributeKey(
			"receivable_packets");

	public static final AttributeKey attrKeySendable = new AttributeKey(
			"sendable_packets");
	public static final NioEventLoopGroup eventLoops = new NioEventLoopGroup(0,
			new ThreadFactoryBuilder().setNameFormat("Netty Client IO #%d")
					.setDaemon(true).build());
	public static final Marker logMarkerNetwork = MarkerManager
			.getMarker("NETWORK");
	public static final Marker field_152461_c = MarkerManager.getMarker(
			"NETWORK_STAT", logMarkerNetwork);
	public static final NetworkStatistics field_152462_h = new NetworkStatistics();
	private static final Logger logger = LogManager.getLogger();

	public static final Marker logMarkerPackets = MarkerManager.getMarker(
			"NETWORK_PACKETS", logMarkerNetwork);

	/**
	 * Prepares a clientside NetworkManager: establishes a connection to the
	 * address and port supplied and configures the channel pipeline. Returns
	 * the newly created instance.
	 */
	public static NetworkManager provideLanClient(InetAddress p_150726_0_,
			int p_150726_1_) {
		final NetworkManager var2 = new NetworkManager(true);
		new Bootstrap()
				.group(eventLoops)
				.handler(new ChannelInitializer() {

					@Override
					protected void initChannel(Channel p_initChannel_1_) {
						try {
							p_initChannel_1_.config().setOption(
									ChannelOption.IP_TOS, Integer.valueOf(24));
						} catch (final ChannelException var4) {
							;
						}

						try {
							p_initChannel_1_.config().setOption(
									ChannelOption.TCP_NODELAY,
									Boolean.valueOf(false));
						} catch (final ChannelException var3) {
							;
						}

						p_initChannel_1_
								.pipeline()
								.addLast("timeout", new ReadTimeoutHandler(20))
								.addLast("splitter", new MessageDeserializer2())
								.addLast(
										"decoder",
										new MessageDeserializer(
												NetworkManager.field_152462_h))
								.addLast("prepender", new MessageSerializer2())
								.addLast(
										"encoder",
										new MessageSerializer(
												NetworkManager.field_152462_h))
								.addLast("packet_handler", var2);
					}
				}).channel(NioSocketChannel.class)
				.connect(p_150726_0_, p_150726_1_)
				.syncUninterruptibly();
		return var2;
	}

	/**
	 * Prepares a clientside NetworkManager: establishes a connection to the
	 * socket supplied and configures the channel pipeline. Returns the newly
	 * created instance.
	 */
	public static NetworkManager provideLocalClient(SocketAddress p_150722_0_) {
		final NetworkManager var1 = new NetworkManager(true);
		new Bootstrap().group(eventLoops).handler(new ChannelInitializer() {

			@Override
			protected void initChannel(Channel p_initChannel_1_) {
				p_initChannel_1_.pipeline().addLast("packet_handler", var1);
			}
		}).channel(LocalChannel.class).connect(p_150722_0_)
				.syncUninterruptibly();
		return var1;
	}

	/** The active channel */
	private Channel channel;

	/**
	 * The current connection state, being one of: HANDSHAKING, PLAY, STATUS,
	 * LOGIN
	 */
	private EnumConnectionState connectionState;

	/**
	 * Whether this NetworkManager deals with the client or server side of the
	 * connection
	 */
	private final boolean isClientSide;

	/** The INetHandler instance responsible for processing received packets */
	private INetHandler netHandler;

	/** The queue for packets that require transmission */
	private final Queue outboundPacketsQueue = Queues
			.newConcurrentLinkedQueue();

	/**
	 * The queue for received, unprioritized packets that will be processed at
	 * the earliest opportunity
	 */
	private final Queue receivedPacketsQueue = Queues
			.newConcurrentLinkedQueue();

	/** The address of the remote party */
	private SocketAddress socketAddress;

	/** A String indicating why the network has shutdown. */
	private IChatComponent terminationReason;

	public NetworkManager(boolean p_i45147_1_) {
		isClientSide = p_i45147_1_;
	}

	@Override
	public void channelActive(ChannelHandlerContext p_channelActive_1_)
			throws Exception {
		super.channelActive(p_channelActive_1_);
		channel = p_channelActive_1_.channel();
		socketAddress = channel.remoteAddress();
		setConnectionState(EnumConnectionState.HANDSHAKING);
	}

	@Override
	public void channelInactive(ChannelHandlerContext p_channelInactive_1_) {
		closeChannel(new ChatComponentTranslation("disconnect.endOfStream",
				new Object[0]));
	}

	@Override
	protected void channelRead0(ChannelHandlerContext p_channelRead0_1_,
			Object p_channelRead0_2_) {
		this.channelRead0(p_channelRead0_1_, (Packet) p_channelRead0_2_);
	}

	protected void channelRead0(ChannelHandlerContext p_channelRead0_1_,
			Packet p_channelRead0_2_) {
		if (channel.isOpen()) {
			final EventPacketReceive event = new EventPacketReceive(
					p_channelRead0_2_);
			TeamBattleClient.getEventManager().call(event);
			if (event.isCancelled())
				return;
			p_channelRead0_2_ = event.getPacket();
			if (p_channelRead0_2_.hasPriority()) {
				p_channelRead0_2_.processPacket(netHandler);
			} else {
				receivedPacketsQueue.add(p_channelRead0_2_);
			}
		}
	}

	/**
	 * Closes the channel, the parameter can be used for an exit message (not
	 * certain how it gets sent)
	 */
	public void closeChannel(IChatComponent p_150718_1_) {
		if (channel.isOpen()) {
			channel.close();
			terminationReason = p_150718_1_;
		}
	}

	/**
	 * Switches the channel to manual reading modus
	 */
	public void disableAutoRead() {
		channel.config().setAutoRead(false);
	}

	/**
	 * Will commit the packet to the channel. If the current thread 'owns' the
	 * channel it will write and flush the packet, otherwise it will add a task
	 * for the channel eventloop thread to do that.
	 */
	private void dispatchPacket(final Packet p_150732_1_,
			final GenericFutureListener[] p_150732_2_) {
		final EnumConnectionState var3 = EnumConnectionState
				.func_150752_a(p_150732_1_);
		final EnumConnectionState var4 = (EnumConnectionState) channel.attr(
				attrKeyConnectionState).get();

		if (var4 != var3) {
			logger.debug("Disabled auto read");
			channel.config().setAutoRead(false);
		}

		if (channel.eventLoop().inEventLoop()) {
			if (var3 != var4) {
				setConnectionState(var3);
			}

			channel.writeAndFlush(p_150732_1_)
					.addListeners(p_150732_2_)
					.addListener(
							ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
		} else {
			channel.eventLoop().execute(new Runnable() {

				@Override
				public void run() {
					if (var3 != var4) {
						NetworkManager.this.setConnectionState(var3);
					}

					channel.writeAndFlush(p_150732_1_)
							.addListeners(p_150732_2_)
							.addListener(
									ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
				}
			});
		}
	}

	/**
	 * Adds an encoder+decoder to the channel pipeline. The parameter is the
	 * secret key used for encrypted communication
	 */
	public void enableEncryption(SecretKey p_150727_1_) {
		channel.pipeline().addBefore(
				"splitter",
				"decrypt",
				new NettyEncryptingDecoder(CryptManager.func_151229_a(2,
						p_150727_1_)));
		channel.pipeline().addBefore(
				"prepender",
				"encrypt",
				new NettyEncryptingEncoder(CryptManager.func_151229_a(1,
						p_150727_1_)));
	}

	@Override
	public void exceptionCaught(ChannelHandlerContext p_exceptionCaught_1_,
			Throwable p_exceptionCaught_2_) {
		ChatComponentTranslation var3;

		if (p_exceptionCaught_2_ instanceof TimeoutException) {
			var3 = new ChatComponentTranslation("disconnect.timeout",
					new Object[0]);
		} else {
			var3 = new ChatComponentTranslation("disconnect.genericReason",
					new Object[] { "Internal Exception: "
							+ p_exceptionCaught_2_ });
		}

		closeChannel(var3);
	}

	/**
	 * Will iterate through the outboundPacketQueue and dispatch all Packets
	 */
	private void flushOutboundQueue() {
		if (channel != null && channel.isOpen()) {
			while (!outboundPacketsQueue.isEmpty()) {
				final NetworkManager.InboundHandlerTuplePacketListener var1 = (NetworkManager.InboundHandlerTuplePacketListener) outboundPacketsQueue
						.poll();
				dispatchPacket(var1.field_150774_a, var1.field_150773_b);
			}
		}
	}

	/**
	 * If this channel is closed, returns the exit message, null otherwise.
	 */
	public IChatComponent getExitMessage() {
		return terminationReason;
	}

	/**
	 * Gets the current handler for processing packets
	 */
	public INetHandler getNetHandler() {
		return netHandler;
	}

	/**
	 * Return the InetSocketAddress of the remote endpoint
	 */
	public SocketAddress getSocketAddress() {
		return socketAddress;
	}

	/**
	 * Returns true if this NetworkManager has an active channel, false
	 * otherwise
	 */
	public boolean isChannelOpen() {
		return channel != null && channel.isOpen();
	}

	/**
	 * True if this NetworkManager uses a memory connection (single player
	 * game). False may imply both an active TCP connection or simply no active
	 * connection at all
	 */
	public boolean isLocalChannel() {
		return channel instanceof LocalChannel
				|| channel instanceof LocalServerChannel;
	}

	/**
	 * Checks timeouts and processes all packets received
	 */
	public void processReceivedPackets() {
		flushOutboundQueue();
		final EnumConnectionState var1 = (EnumConnectionState) channel.attr(
				attrKeyConnectionState).get();

		if (connectionState != var1) {
			if (connectionState != null) {
				netHandler.onConnectionStateTransition(connectionState, var1);
			}

			connectionState = var1;
		}

		if (netHandler != null) {
			for (int var2 = 1000; !receivedPacketsQueue.isEmpty() && var2 >= 0; --var2) {
				final Packet var3 = (Packet) receivedPacketsQueue.poll();
				var3.processPacket(netHandler);
			}

			netHandler.onNetworkTick();
		}

		channel.flush();
	}

	/**
	 * Will flush the outbound queue and dispatch the supplied Packet if the
	 * channel is ready, otherwise it adds the packet to the outbound queue and
	 * registers the GenericFutureListener to fire after transmission
	 */
	public void scheduleOutboundPacket(Packet p_150725_1_,
			GenericFutureListener... p_150725_2_) {
		final EventPacketSent event = new EventPacketSent(p_150725_1_);
		TeamBattleClient.getEventManager().call(event);
		if (event.isCancelled())
			return;
		p_150725_1_ = event.getPacket();
		if (channel != null && channel.isOpen()) {
			flushOutboundQueue();
			dispatchPacket(p_150725_1_, p_150725_2_);
		} else {
			outboundPacketsQueue
					.add(new NetworkManager.InboundHandlerTuplePacketListener(
							p_150725_1_, p_150725_2_));
		}
	}

	/**
	 * Sets the new connection state and registers which packets this channel
	 * may send and receive
	 */
	public void setConnectionState(EnumConnectionState p_150723_1_) {
		connectionState = (EnumConnectionState) channel.attr(
				attrKeyConnectionState).getAndSet(p_150723_1_);
		channel.attr(attrKeyReceivable).set(
				p_150723_1_.func_150757_a(isClientSide));
		channel.attr(attrKeySendable).set(
				p_150723_1_.func_150754_b(isClientSide));
		channel.config().setAutoRead(true);
		logger.debug("Enabled auto read");
	}

	/**
	 * Sets the NetHandler for this NetworkManager, no checks are made if this
	 * handler is suitable for the particular connection state (protocol)
	 */
	public void setNetHandler(INetHandler p_150719_1_) {
		Validate.notNull(p_150719_1_, "packetListener", new Object[0]);
		logger.debug("Set listener of {} to {}", new Object[] { this,
				p_150719_1_ });
		netHandler = p_150719_1_;
	}
}
