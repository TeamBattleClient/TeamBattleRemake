package down.TeamBattle.Modules.mods;

import down.TeamBattle.TeamBattleClient;
import down.TeamBattle.EventSystem.Event;
import down.TeamBattle.EventSystem.events.EventPostSendMotionUpdates;
import down.TeamBattle.EventSystem.events.EventPreSendMotionUpdates;
import down.TeamBattle.ModuleValues.Value;
import down.TeamBattle.Modules.Mod;
import down.TeamBattle.Utils.Logger;
import down.TeamBattle.Utils.TimeHelper;
import down.TeamBattle.command.Command;
import net.minecraft.client.gui.inventory.GuiChest;
import net.minecraft.item.ItemPotion;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C09PacketHeldItemChange;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionEffect;

public final class AutoPot extends Mod {
	private final Value<Long> delay = new Value<Long>("autopot_delay", 500L);
	private final Value<Float> health = new Value<Float>("autopot_health",
			18.0F);
	private boolean potting;
	private final TimeHelper time = new TimeHelper();

	public AutoPot() {
		super("AutoPot", Potion.heal.getLiquidColor());
		TeamBattleClient.getCommandManager()
				.getContents()
				.add(new Command("autopotdelay", "<milliseconds>", "potdelay",
						"apd") {
					@Override
					public void run(String message) {
						if (message.split(" ")[1].equalsIgnoreCase("-d")) {
							delay.setValue(delay.getDefaultValue());
						} else {
							delay.setValue(Long.parseLong(message.split(" ")[1]));
						}

						if (delay.getValue() > 1000L) {
							delay.setValue(1000L);
						} else if (delay.getValue() < 1L) {
							delay.setValue(1L);
						}
						Logger.logChat("AutoPot Delay set to: "
								+ delay.getValue());
					}
				});

		TeamBattleClient.getCommandManager()
				.getContents()
				.add(new Command("autopothealth", "<health>", "pothealth",
						"aph") {
					@Override
					public void run(String message) {
						if (message.split(" ")[1].equalsIgnoreCase("-d")) {
							health.setValue(health.getDefaultValue());
						} else {
							health.setValue(Float.parseFloat(message.split(" ")[1]));
						}

						if (health.getValue() < 1.0) {
							health.setValue(1.0F);
						}
						Logger.logChat("AutoPot Health set to: "
								+ health.getValue());
					}
				});

		TeamBattleClient.getCommandManager().getContents()
				.add(new Command("autopot", "none", "pot") {
					@Override
					public void run(String message) {
						if (doesHotbarHavePots()) {
							splashPot();
						} else {
							getPotsFromInventory();
							splashPot();
						}
					}
				});
	}

	private boolean doesHotbarHavePots() {
		for (int index = 36; index < 45; index++) {
			final ItemStack stack = mc.thePlayer.inventoryContainer.getSlot(
					index).getStack();
			if (stack == null) {
				continue;
			}
			if (isStackSplashHealthPot(stack))
				return true;
		}
		return false;
	}

	private void getPotsFromInventory() {
		if (mc.currentScreen instanceof GuiChest)
			return;
		for (int index = 9; index < 36; index++) {
			final ItemStack stack = mc.thePlayer.inventoryContainer.getSlot(
					index).getStack();
			if (stack == null) {
				continue;
			}
			if (isStackSplashHealthPot(stack)) {
				mc.playerController.windowClick(0, index, 0, 1, mc.thePlayer);
				break;
			}
		}
	}

	public boolean isPotting() {
		return potting;
	}

	private boolean isStackSplashHealthPot(ItemStack stack) {
		if (stack == null)
			return false;
		if (stack.getItem() instanceof ItemPotion) {
			final ItemPotion potion = (ItemPotion) stack.getItem();
			if (ItemPotion.isSplash(stack.getItemDamage())) {
				for (final Object o : potion.getEffects(stack)) {
					final PotionEffect effect = (PotionEffect) o;
					if (effect.getPotionID() == Potion.heal.id)
						return true;
				}
			}
		}
		return false;
	}

	@Override
	public void onEvent(Event event) {
		if (event instanceof EventPreSendMotionUpdates) {
			if (updateCounter() == 0)
				return;
			final EventPreSendMotionUpdates pre = (EventPreSendMotionUpdates) event;
			if (mc.thePlayer.getHealth() <= health.getValue()
					&& time.hasReached(delay.getValue())) {
				if (doesHotbarHavePots()) {
					potting = true;
					pre.setPitch(90);
				}
			}
		} else if (event instanceof EventPostSendMotionUpdates) {
			if (updateCounter() == 0)
				return;
			if (mc.thePlayer.getHealth() <= health.getValue()
					&& time.hasReached(delay.getValue())) {
				if (doesHotbarHavePots()) {
					splashPot();
					potting = false;
				} else {
					getPotsFromInventory();
				}
				time.reset();
			}
		}
	}

	private void splashPot() {
		for (int index = 36; index < 45; index++) {
			final ItemStack stack = mc.thePlayer.inventoryContainer.getSlot(
					index).getStack();
			if (stack == null) {
				continue;
			}

			if (isStackSplashHealthPot(stack)) {
				final int oldslot = mc.thePlayer.inventory.currentItem;
				potting = true;
				mc.getNetHandler().addToSendQueue(
						new C03PacketPlayer.C05PacketPlayerLook(
								mc.thePlayer.rotationYaw, 90,
								mc.thePlayer.onGround));
				mc.getNetHandler().addToSendQueue(
						new C09PacketHeldItemChange(index - 36));
				mc.playerController.updateController();
				mc.getNetHandler().addToSendQueue(
						new C08PacketPlayerBlockPlacement(-1, -1, -1, -1,
								stack, 0, 0, 0));
				mc.getNetHandler().addToSendQueue(
						new C09PacketHeldItemChange(oldslot));
				potting = false;
				mc.getNetHandler().addToSendQueue(
						new C03PacketPlayer.C05PacketPlayerLook(
								mc.thePlayer.rotationYaw,
								mc.thePlayer.rotationPitch,
								mc.thePlayer.onGround));
				break;
			}
		}
	}

	private int updateCounter() {
		int counter = 0;
		for (int index = 9; index < 45; index++) {
			final ItemStack stack = mc.thePlayer.inventoryContainer.getSlot(
					index).getStack();
			if (stack == null) {
				continue;
			}
			if (isStackSplashHealthPot(stack)) {
				counter += stack.stackSize;
			}
		}

		setTag(getName() + "\247f: \2477" + counter);
		return counter;
	}
}
